agent Robot{
    module EIS ei;
    module Console C;
    module System S;
    module MyModule mod;

    types robot {
        formula id(string);
        formula currentLocation(int, int);
    }

    rule +!main([string name, string id]){
        ei.launch("vw","dependency/vacuumworld-1.2.0.jar");
        ei.join();
        ei.link(name);
        +id(id);
        +currentLocation(-1, -1);
        C.println("name: " + name);
    }

    rule +$ei.event(square(string squareName, string squareContents)) : currentLocation(int oldX, int oldY) & ei.location(int newX, int newY) & ei.task("none"){
        if(oldX == newX & oldY == newY) {
            string dir = "";
            while (dir == "") {
                dir = mod.getDirection("" + newY, "" + newX);
            }
            ei.move(dir, 1);
        }
    }

    rule +$ei.event(location(int newX, int newY)) : id(string id) & ei.direction(string facing) & currentLocation(int oldX, int oldY){
        -currentLocation(oldX, oldY);

        C.println("col: " + newX + ", row: " + newY);
        string col = "" + newX;
        string row = "" + newY;
        mod.updateStep(row, col, id);
        foreach(ei.square(string squareName, string squareContents)){
            if((squareContents == "dust" | squareContents == "empty") & squareName ~= "here"){
                mod.updateNonObstacle(row, col, squareName, facing);
            }
        }
    
        ei.clean();
        wait(ei.task("none"));

        +currentLocation(newX, newY);
        string dir = "";
        while (dir == "") {
            dir = mod.getDirection("" + newY, "" + newX);
        }
        ei.move(dir, 1);

        wait(ei.task("none"));
	}

    
}